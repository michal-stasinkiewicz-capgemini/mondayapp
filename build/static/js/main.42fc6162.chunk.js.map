{"version":3,"sources":["Infrastructure/monday.ts","MyApp.tsx","MyLayout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["monday","mondaySdk","MyApp","props","useState","Color","bg","setBg","Date","selectedDate","setSelectedDate","me","name","data","setData","selectedBoards","setSelectedBoards","selectedBoardColumns","setSelectedBoardColumns","isTableLoading","setIsTableLoading","boardIdRef","useRef","useEffect","getSettings","getMe","boardColumns","rawBoardValues","listen","res","setting","background","date","api","then","tempData","createBoardColumns","rawBoardColumns","resultColumns","map","rawColumn","title","dataIndex","key","filter","x","splice","className","style","hex","type","toDateString","minWidth","ref","onClick","id","current","value","temp","boards","columns","catch","er","length","dataSource","items","rawBoardValue","column_values","rawValue","i","text","reduce","result","item","Object","keys","size","loading","Content","Layout","Header","MyLayout","hasSider","overflow","padding","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.42fc6162.chunk.js","sourcesContent":["import mondaySdk from \"monday-sdk-js\";\r\nexport const monday = mondaySdk();\r\n","import React, { useRef } from \"react\";\nimport \"./App.css\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Color from \"color\";\nimport { monday } from \"./Infrastructure/monday\";\nimport Divider from \"antd/lib/divider\";\nimport { IData } from \"./Infrastructure/Interfaces/IData\";\nimport { ISettings } from \"./Infrastructure/Interfaces/ISettings\";\nimport { Button, Input, InputNumber, InputRef, Space, Table } from \"antd\";\n\ninterface IMyAppProps { }\n\nconst MyApp: React.FC<IMyAppProps> = (props) => {\n  const [bg, setBg] = useState<Color>(Color(\"#00ca72\"))\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date())\n\n  const [data, setData] = useState<IData>({ me: { name: \"Stranger\" } });\n\n  const [selectedBoards, setSelectedBoards] = useState<any[]>([]);\n  const [selectedBoardColumns, setSelectedBoardColumns] = useState<any[]>([]);\n\n  const [isTableLoading, setIsTableLoading] = useState<boolean>();\n\n  const boardIdRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    getSettings();\n    getMe();\n\n  }, [])\n\n\n\n  const getSettings = () => {\n    monday.listen(\"settings\", (res) => {\n      var setting: ISettings = res.data;\n\n      setting.background && setBg(Color(setting.background));\n      setting.date && setSelectedDate(new Date(setting.date));\n    });\n  }\n\n  const getMe = () => {\n    monday.api(`query { me { name } }`)\n      .then((res) => {\n        if (res) {\n          var tempData: IData = res.data as IData;\n          tempData.me && setData({ me: { name: tempData.me.name } });\n        }\n      });\n  }\n\n  const getBoardDetail = (id: string) => {\n    if (!id) return;\n    setIsTableLoading(true);\n    setSelectedBoardColumns([])\n    setSelectedBoards([])\n\n    monday.api(\n      `query {  \n        boards (ids: ${id}) {\n          name\n          state\n          columns {\n            title\n            type\n          }  \n          board_folder_id\n          items {\n            id\n            name\n            column_values {\n              text\n            }\n          }\n        }\n      }`)\n      .then(res => {\n        const temp = (res.data as any).boards;\n        res && setSelectedBoardColumns(createBoardColumns(temp[0].columns));\n        res && setSelectedBoards(temp);\n        setIsTableLoading(false);\n      })\n      .catch(er => setIsTableLoading(false))\n  }\n\n  const varToString = (varObj: {}) => Object.keys(varObj)[0]\n\n  const createBoardColumns = (rawBoardColumns: any[]) => {\n    const resultColumns = rawBoardColumns && rawBoardColumns.map((rawColumn: any) => ({\n      title: rawColumn.title,\n      dataIndex: rawColumn.title,\n      key: rawColumn.title,\n    }))\n      .filter(x => x.title != `Subitems`);\n    resultColumns.splice(0, 0, { title: \"id\", dataIndex: \"id\", key: \"id\" });\n    return resultColumns;\n  }\n\n  const createBoardValues = (boardColumns: any[], rawBoardValues: any) => {\n    const boardValuesResult = rawBoardValues.map((rawBoardValue: any) =>\n      rawBoardValue.column_values.map((rawValue: any, i: number) => ({\n        [`${boardColumns[i].title}`]: rawValue.text\n      })))\n\n    return boardValuesResult.map((res: any) => res.reduce((result: any, item: any) => {\n      var key = Object.keys(item)[0];\n      result[key] = item[key];\n      return result;\n    }, {}));\n\n  }\n\n  return (\n    <div className=\"App\" style={{ background: bg.hex() }} >\n      <Space className=\"centered\">\n        <span>Hello, {data.me.name}!</span>\n        <Divider type=\"vertical\" />\n        <span>Selected date: {selectedDate.toDateString()}!</span>\n      </Space>\n      <Divider type=\"horizontal\" />\n      <Space className=\"centered\">\n        Board Id:\n        <InputNumber style={{ minWidth: 200 }} ref={boardIdRef} />\n        <Button onClick={() => getBoardDetail(boardIdRef.current!.value)}>Search</Button >\n      </Space>\n      <Divider type=\"horizontal\" />\n      <Space>\n        {selectedBoards && selectedBoards.length > 0 &&\n          <Table columns={selectedBoardColumns} dataSource={createBoardValues(selectedBoardColumns, selectedBoards[0].items)} size=\"small\" loading={isTableLoading} />}\n      </Space>\n    </div>\n  );\n}\n\nexport default MyApp;\n","import { Layout } from 'antd';\r\nimport React from 'react';\r\nimport MyApp from './MyApp';\r\n\r\nconst { Header, Content, } = Layout;\r\n\r\nconst MyLayout: React.FC = () => (\r\n    <Layout hasSider>\r\n        <Layout className=\"site-layout\" >\r\n            <Content style={{ overflow: 'initial' }}>\r\n                <div className=\"site-layout-background\" style={{ padding: 1, textAlign: 'center' }}>\r\n                    <MyApp />\r\n                </div>\r\n            </Content>\r\n        </Layout>\r\n    </Layout>\r\n);\r\n\r\nexport default MyLayout;","import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\"\nimport MyApp from \"./MyApp\";\nimport MyLayout from \"./MyLayout\";\n//Explore more Monday React Components here: https://style.monday.com/\n\nconst monday = mondaySdk();\n\ninterface IAppProps {\n  settings?: object;\n  name?: string;\n}\nconst App: React.FC<IAppProps> = (props) => {\n\n  return (<>\n    <MyLayout />\n  </>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport const register = (config: any) => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nconst registerValidSW = (swUrl: any, config: { onUpdate: (arg0: ServiceWorkerRegistration) => void; onSuccess: (arg0: ServiceWorkerRegistration) => void; }) => {\n  navigator.serviceWorker\n    .register(swUrl.toString())\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nconst checkValidServiceWorker = (swUrl: any, config: { onUpdate: (arg0: ServiceWorkerRegistration) => void; onSuccess: (arg0: ServiceWorkerRegistration) => void; }) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  console.log(swUrl)\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'antd/dist/antd.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}